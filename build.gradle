import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "java"
	id "architectury-plugin" version "+"
	id "de.undercouch.download" version "+"
	id "dev.architectury.loom" version "+" apply false
	id "com.github.johnrengelman.shadow" version "+" apply false
}

def default_minecraft_version = "1.20"
def minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.getProperties().get("buildVersion").toString() : default_minecraft_version
def minecraft_main_version = minecraft_version.split("\\.")[1] as int
def patreon_api_key = rootProject.properties.containsKey("patreonApiKey") ? rootProject.getProperties().get("patreonApiKey").toString() : ""
boolean joml_math = minecraft_version == "1.19.3" || minecraft_version == "1.19.4" || minecraft_version == "1.20" || minecraft_version == "1.20.1"
boolean parchment_not_avail = false
String parchment_version = parchment_not_avail ? "N/A" : new XmlSlurper().parse("https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-${minecraft_version}/maven-metadata.xml").versioning.release
def testServer = rootProject.properties.containsKey("testServer") ? rootProject.getProperties().get("testServer").toString() : ""

rootProject.ext.fabric_loader_version = [minecraft_version, getJson("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version)[0]["loader"]["version"]]
rootProject.ext.forge_version = minecraft_version + "-" + getJson("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json")["promos"][minecraft_version + "-recommended"]
rootProject.ext.fabric_api_data = getModrinthData("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_data = getModrinthData("fabric", minecraft_version, "modmenu")
rootProject.ext.architectury_data = getModrinthData("forge", minecraft_version, "architectury-api")

rootProject.ext.architectury_id = minecraft_main_version == 16 ? "me.shedaniel" : "dev.architectury"
rootProject.ext.variation = rootProject.properties.containsKey("variation") ? rootProject.getProperties().get("variation").toString() : "normal"
rootProject.ext.variation_header = rootProject.variation == "normal" ? "MTR" : rootProject.variation == "server" ? "MTR-server" : "Modern-Elevators-Escalators"

architectury {
	minecraft = minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"
	apply plugin: "com.github.johnrengelman.shadow"

	loom {
		silentMojangMappingsLicense()

		mixin {
			defaultRefmapName.set("mtr-refmap.json")
		}
	}

	configurations {
		shadowCommon
	}

	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings parchment_not_avail ? loom.officialMojangMappings() : loom.layered() {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
		}
		implementation name: "Dynmap-3.2.1"
		implementation name: "BlueMapAPI-2.1.1"
		implementation "xyz.jpenilla:squaremap-api:1.2.1"
		implementation "org.eclipse.jetty:jetty-http:9.+"
		implementation "org.eclipse.jetty:jetty-io:9.+"
		implementation "org.eclipse.jetty:jetty-security:9.+"
		implementation "org.eclipse.jetty:jetty-server:9.+"
		implementation "org.eclipse.jetty:jetty-servlet:9.+"
		implementation "org.eclipse.jetty:jetty-util:9.+"
		implementation "org.eclipse.jetty:jetty-util-ajax:9.+"
		implementation "javax.servlet:javax.servlet-api:+"
		implementation "org.msgpack:msgpack-core:+"
		implementation "com.hierynomus:sshj:+"
		implementation "com.github.jonafanho:Minecraft-Mod-API-Tools:${rootProject.minecraft_mod_api_tools_version}"
		shadowCommon "org.eclipse.jetty:jetty-http:9.+"
		shadowCommon "org.eclipse.jetty:jetty-io:9.+"
		shadowCommon "org.eclipse.jetty:jetty-security:9.+"
		shadowCommon "org.eclipse.jetty:jetty-server:9.+"
		shadowCommon "org.eclipse.jetty:jetty-servlet:9.+"
		shadowCommon "org.eclipse.jetty:jetty-util:9.+"
		shadowCommon "org.eclipse.jetty:jetty-util-ajax:9.+"
		shadowCommon "javax.servlet:javax.servlet-api:+"
		shadowCommon "org.msgpack:msgpack-core:+"
	}
}

tasks.register("setupFiles") {
	System.out.println("Fabric Loader: " + rootProject.fabric_loader_version[1])
	System.out.println("Forge: " + rootProject.forge_version)
	System.out.println("Fabric API: " + rootProject.fabric_api_data[0])
	System.out.println("Mod Menu: " + rootProject.mod_menu_data[0])
	System.out.println("Architectury: " + rootProject.architectury_data[0].split("\\+")[0])

	/*
	download.run {
		src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/1.19.4.zip"
		dest "common/src/main/java/mtr/mappings/mappings.zip"
		overwrite true
		retries - 1
	}
	copy {
		outputs.upToDateWhen { false }
		from(zipTree("common/src/main/java/mtr/mappings/mappings.zip")) { eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
		into "common/src/main/java/mtr/mappings"
		filter(ReplaceTokens, tokens: ["package": "mtr.mappings"])
	}
	ant.path { ant.fileset(dir: "common/src/main/java/mtr/mappings", includes: "Fabric*.java") }.list().each {
		ant.move(file: it, todir: "fabric/src/main/java/mtr/mappings")
	}
	ant.path { ant.fileset(dir: "common/src/main/java/mtr/mappings", includes: "Forge*.java") }.list().each {
		ant.move(file: it, todir: "forge/src/main/java/mtr/mappings")
	}
	 */

	delete fileTree("common/src/main/resources/assets/mtr/sounds")
	delete fileTree("common/src/main/resources/assets/mtr/textures")
	delete fileTree("common/src/main/resources/assets/mtr/website")
	delete fileTree("common/src/main/resources/assets/mtr/sounds.json")
	delete fileTree("common/src/main/resources/data/mtr/loot_tables")
	delete fileTree("common/src/main/resources/data/mtr/recipes")
	delete fileTree("fabric/src/main/resources")
	delete fileTree("forge/src/main/resources")
	copy {
		outputs.upToDateWhen { false }
		from "resources/common/lifts"
		into "common/src/main/resources"
	}
	if (rootProject.variation == "normal") {
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal"
			into "common/src/main/resources"
		}
	}
	if (rootProject.variation == "normal" || rootProject.variation == "server") {
		download.run {
			src "https://unpkg.com/fabric/dist/fabric.min.js"
			dest "common/src/main/resources/assets/mtr/website/fabric.min.js"
			overwrite true
			retries - 1
		}
		download.run {
			src "https://raw.githubusercontent.com/bramstein/fontfaceobserver/master/fontfaceobserver.standalone.js"
			dest "common/src/main/resources/assets/mtr/website/fontfaceobserver.standalone.js"
			overwrite true
			retries - 1
		}
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal/data"
			into "common/src/main/resources/data"
		}
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal/assets/mtr/website"
			into "common/src/main/resources/assets/mtr/website"
		}
	}
	copy {
		outputs.upToDateWhen { false }
		from "resources/fabric/" + (rootProject.variation == "lifts" ? "lifts" : "normal")
		into "fabric/src/main/resources"
	}
	copy {
		outputs.upToDateWhen { false }
		from "resources/forge/" + (rootProject.variation == "lifts" ? "lifts" : "normal")
		into "forge/src/main/resources"
	}

	download.run {
		src "https://crowdin.com/backend/download/project/minecraft-transit-railway.zip"
		dest "common/src/main/java/mtr/mappings/lang.zip"
		overwrite true
		retries - 1
	}
	copy {
		outputs.upToDateWhen { false }
		from(zipTree("common/src/main/java/mtr/mappings/lang.zip"))
		into "common/src/main/resources/assets/mtr/lang"
	}

	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/KeysTemplate.java"
		into "common/src/main/java/mtr"
		filter(ReplaceTokens, tokens: ["key": patreon_api_key, "version": minecraft_version + "-" + rootProject.mod_version, "lifts": rootProject.variation, "server": testServer])
		rename "(.+)Template.java", "\$1.java"
	}
	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/latest.json"
		into "build/latest"
		filter(ReplaceTokens, tokens: ["version": rootProject.mod_version])
	}
	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/version-template.js"
		into "common/src/main/resources/assets/mtr/website"
		filter(ReplaceTokens, tokens: ["version": minecraft_version + "-" + rootProject.mod_version])
		rename "(.+)-template.js", "\$1.js"
	}
	copy {
		outputs.upToDateWhen { false }
		from "fabric/src/main/UnknownPacketMixinTemplate.java"
		into "fabric/src/main/java/mtr/mixin"
		filter(ReplaceTokens, tokens: ["path1": minecraft_main_version <= 17 || minecraft_version == "1.18" ? "apache/logging/log4j" : "slf4j", "path2": minecraft_main_version <= 17 || minecraft_version == "1.18" ? "apache.logging.log4j" : "slf4j"])
		rename "(.+)Template.java", "\$1.java"
	}
	copy {
		outputs.upToDateWhen { false }
		from "forge/src/main/LevelRendererMixinTemplate.java"
		into "forge/src/main/java/mtr/mixin"
		filter(ReplaceTokens, tokens: ["path": joml_math ? "org.joml" : "com.mojang.math"])
		rename "(.+)Template.java", "\$1.java"
	}

	if (minecraft_main_version <= 17) {
		copy {
			outputs.upToDateWhen { false }
			from "fabric/src/main/BlockEntityExtensionTemplate.java"
			into "fabric/src/main/java/" + (minecraft_main_version == 16 ? "me/shedaniel" : "dev") + "/architectury/extensions"
			filter(ReplaceTokens, tokens: ["package": minecraft_main_version == 16 ? "me.shedaniel" : "dev"])
			rename "(.+)Template.java", "\$1.java"
		}
	}
	if (minecraft_main_version != 16) {
		ant.delete(dir: "fabric/src/main/java/me")
	}
	if (minecraft_main_version != 17) {
		ant.delete(dir: "fabric/src/main/java/dev")
	}
}

allprojects {
	apply plugin: "architectury-plugin"

	version = minecraft_version + "-" + rootProject.mod_version
	group = rootProject.maven_group

	repositories {
		mavenCentral()
		maven { url = "https://jitpack.io/" }
		maven { url = "https://maven.terraformersmc.com/" }
		maven {
			name = 'ParchmentMC'
			url = 'https://maven.parchmentmc.org'
		}
		flatDir {
			dirs "../libs"
		}
	}

	afterEvaluate {
		for (def task in it.tasks) {
			if (task != rootProject.tasks.setupFiles) {
				task.dependsOn rootProject.tasks.setupFiles
			}
		}
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(minecraft_main_version == 16 ? 8 : minecraft_main_version == 17 ? 16 : 17))
	}
	withSourcesJar()
	withJavadocJar()
}

static String[] getModrinthData(String loader, String minecraftVersion, String projectId) {
	def versionsArray = getJson("https://api.modrinth.com/v2/project/" + projectId + "/version")
	for (def versionElement : versionsArray) {
		if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
			return [versionElement["version_number"], versionElement["files"][0]["url"]]
		}
	}
	return ["", ""]
}

static Object getJson(String url) {
	int tries = 0
	while (true) {
		try {
			if (tries > 1) {
				System.out.println("Parsed ${url} after ${tries} tries")
			}
			return new JsonSlurper().parse(url.toURL())
		} catch (Exception ignored) {
			Thread.sleep(1000)
		}
	}
}

import org.gradle.api.internal.file.copy.CopyAction;
import org.gradle.api.internal.file.copy.CopyActionProcessingStream;

class DummyArchiveTask extends AbstractArchiveTask {

	protected CopyAction createCopyAction() {
		return new DummyCopyAction();
	}

	class DummyCopyAction implements CopyAction {

		@Override
		WorkResult execute(CopyActionProcessingStream stream) {
			return WorkResults.didWork(true);
		}
	}
}

task dummyForgeOutput(type: DummyArchiveTask) {
	// Forgix's mergeJars task doesn't extend AbstractArchiveTask.
	// This is to make github.com/teaconmc/longjing happy.
	destinationDirectory = file("build/release/")
	archiveBaseName = "MTR-forge"
	archiveVersion = minecraft_version + "-" + rootProject.mod_version
	archiveExtension = "jar"
}
